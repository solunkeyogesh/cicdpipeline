version: 0.2

env:
  variables:
    AWS_REGION: ap-south-1
    ACCOUNT_ID: "784012530518"
    ECR_REPO: cicdpipeline
    ECS_CLUSTER: "cicd-cluster"
    ECS_SERVICE: "cicdpipeline-service"
    ECS_FAMILY: "cicdpipelinetaskdefinition"
    ECS_CONTAINER_NAME: "cicdpipelinecontainer"

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - echo "Java & Docker versions"
      - mvn -version
      - docker --version
      - if ! command -v jq >/dev/null 2>&1; then (apt-get update && apt-get install -y jq) || yum install -y jq; fi

  pre_build:
    commands:
      - echo "Resolving IMAGE_TAG..."
      - |
        if [ -n "${CODEBUILD_RESOLVED_SOURCE_VERSION:-}" ] && [ "$CODEBUILD_RESOLVED_SOURCE_VERSION" != "unknown" ]; then
          IMAGE_TAG="${CODEBUILD_RESOLVED_SOURCE_VERSION:0:12}"
        else
          IMAGE_TAG="build-${CODEBUILD_BUILD_NUMBER:-local}"
        fi
        export IMAGE_TAG
      - echo "IMAGE_TAG=$IMAGE_TAG"

      - echo "Logging in to ECR..."
      - aws --version
      - aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
      - REPO_URI="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO"
      - export REPO_URI
      - echo "REPO_URI=$REPO_URI"

  build:
    commands:
      - echo "Building Maven artifact..."
      - mvn -q -DskipTests package
      - echo "Building Docker image..."
      - docker build -t "$REPO_URI:$IMAGE_TAG" .
      - docker tag "$REPO_URI:$IMAGE_TAG" "$REPO_URI:latest"

  post_build:
    commands:
      - echo "Pushing images to ECR..."
      - docker push "$REPO_URI:$IMAGE_TAG"
      - docker push "$REPO_URI:latest" || true

      - echo "Fetching current task definition in service..."
      - CURRENT_TD_ARN=$(aws ecs describe-services --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE" --query 'services[0].taskDefinition' --output text)

      - echo "Exporting current task definition JSON..."
      - aws ecs describe-task-definition --task-definition "$CURRENT_TD_ARN" --query 'taskDefinition' > td.json

      - echo "Creating new task definition (swap image only)..."
      - NEW_IMAGE="$REPO_URI:$IMAGE_TAG"
      - cat td.json | jq --arg IMG "$NEW_IMAGE" --arg CON "$ECS_CONTAINER_NAME" '.containerDefinitions |= map( if .name == $CON then (.image=$IMG) else . end ) | del(.taskDefinitionArn,.revision,.status,.registeredAt,.registeredBy,.requiresAttributes,.compatibilities,.tags)' > td-new.json
      - cat td-new.json

      - echo "Registering new task definition revision..."
      - NEW_TD_ARN=$(aws ecs register-task-definition --cli-input-json file://td-new.json --query 'taskDefinition.taskDefinitionArn' --output text)

      - echo "Updating ECS service to new task definition..."
      - aws ecs update-service --cluster "$ECS_CLUSTER" --service "$ECS_SERVICE" --task-definition "$NEW_TD_ARN" --output text

      - echo "Waiting for service to become stable..."
      - aws ecs wait services-stable --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE"
      - echo "✅ Deployment successful."

      - echo "Writing deploy metadata (for rollback and audit)..."
      - |
        cat > deploy-meta.json <<EOF
        {
          "repoUri": "$REPO_URI",
          "imageTag": "$IMAGE_TAG",
          "containerName": "$ECS_CONTAINER_NAME",
          "previousTaskDefinitionArn": "$CURRENT_TD_ARN",
          "newTaskDefinitionArn": "$NEW_TD_ARN",
          "cluster": "$ECS_CLUSTER",
          "service": "$ECS_SERVICE",
          "family": "$ECS_FAMILY"
        }
        EOF
      - cat deploy-meta.json

      - echo "Generating rollback script artifact..."
      - |
        cat > rollback.sh <<'EOS'
        #!/usr/bin/env bash
        set -euo pipefail
        META="deploy-meta.json"
        if [ ! -f "$META" ]; then
          echo "deploy-meta.json not found. Download the artifact from the successful build."
          exit 1
        fi
        PREV_TD=$(jq -r '.previousTaskDefinitionArn' "$META")
        CLUSTER=$(jq -r '.cluster' "$META")
        SERVICE=$(jq -r '.service' "$META")
        echo "Rolling back service '$SERVICE' on cluster '$CLUSTER' to taskDef:"
        echo "  $PREV_TD"
        aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --task-definition "$PREV_TD"
        echo "Waiting for service to stabilize..."
        aws ecs wait services-stable --cluster "$CLUSTER" --services "$SERVICE"
        echo "✅ Rollback complete."
        EOS
      - chmod +x rollback.sh

      - printf '[{"name":"%s","imageUri":"%s"}]' "$ECS_CONTAINER_NAME" "$REPO_URI:$IMAGE_TAG" > imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
    - deploy-meta.json
    - rollback.sh
